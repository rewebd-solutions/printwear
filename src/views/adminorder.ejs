<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/adminorder.css">
  <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v6.0.0-beta3/css/all.css">
  <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css">
  <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
  <link rel="stylesheet" href="https://cdn.datatables.net/select/1.3.4/css/select.dataTables.min.css" />
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/select/1.3.4/js/dataTables.select.min.js"></script>
  <title>Admin Order details - Printwear</title>
</head>

<body>
  <div class="banner">
    <%- include('partials/admin-side.ejs') %>
      <%- include('partials/admin-nav.ejs') %>
  </div>
  <div class="manageorder">
    <div class="container">
      <div style="display: flex; justify-content: space-between; align-items: center; max-width: 1100px;">
        <h2 id="order-id-heading">Order ID: </h2>
        <div style="display: flex; gap: 1rem; align-items: center;">
          Change status to: 
          <select id="order-status-filter" class="table-filter">
            <option value="all" disabled selected>Status</option>
            <option value="none">None</option>
            <option value="received">Received</option>
            <option value="ready-to-ship">Ready to Ship</option>
            <option value="on-hold">On Hold</option>
            <option value="processing">Processing</option>
            <option value="rto-delivered">RTO Delivered</option>
            <option value="shipment-cancel">Shipment cancelled</option>
            <option value="pickup-scheduled">Pickup scheduled</option>
            <option value="out-for-pickup">Out for pickup</option>
            <option value="in-transit">In transit</option>
            <option value="return-to-origin">Return to origin</option>
            <option value="return-init">Return initiated</option>
            <option value="cancelled">Cancelled</option>
            <option value="undelivered">Undelivered</option>
            <option value="invoiced">Invoiced</option>
            <option value="shipped">Shipped</option>
            <option value="delivered">Deliverd</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
          </select>
          <button onclick="changeStatus(this)" class="filter-button filter-button-active">Apply</button>
        </div>
      </div>

      <div id="order-details">

      </div>

      <!-- Second div containing order items -->
      <div id="order-items">
        <!-- Table headings for order items -->
        <table>
          <thead>
            <tr>
              <th>Product</th>
              <th>Details</th>
              <th>Cost</th>
              <th>Quantity</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody id="order-items-body">

          </tbody>
        </table>

      </div>

      <div id="delivery-details">

      </div>

      <div id="deliv-details">
        <table>
          <thead>
            <tr>
              <th>Criteria</th>
              <th>Price</th>
            </tr>
          </thead>
          <tbody>

          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    var notyf = new Notyf();
    const orderId = location.pathname.split("/")[3];
    var orderData = {};

    const changeStatus = async (el) => {
      try {
        el.classList.add("disabled");
        const currentStatus = document.querySelector("#order-status-filter").value;
        if (currentStatus == "all" || currentStatus == "none") return notyf.error("Invalid status selection")
        const changeStatusRequest = await fetch("/admin/recentorders/update", {
          method: "POST",
          headers: {
            'Content-Type': "application/json"
          },
          body: JSON.stringify({ 
            ids: [orderId],
            status: currentStatus
          })
        });
        const changeStatusResponse = await changeStatusRequest.json();
        console.log("ðŸš€ ~ changeStatus ~ changeStatusResponse:", changeStatusResponse)
        if (changeStatusRequest.status != 200) {
          return notyf.error(changeStatusResponse.error);
        }
        notyf.success(changeStatusResponse.message);
        
      } catch (error) {
        console.log("ðŸš€ ~ changeStatus ~ error:", error)
        notyf.error(error);
      } finally {
        el.classList.remove("disabled");
      }
    }

    const fetchOrderData = async () => {
      try {
        const adminOrdersRequest = await fetch(`/admin/recentorders/${orderId}`);
        const adminOrdersResponse = await adminOrdersRequest.json();
        console.log("ðŸš€ ~ fetchOrderData ~ adminOrdersResponse:", adminOrdersResponse)
        if (adminOrdersRequest.status == 200) {
          orderData = adminOrdersResponse
          return populateData();
        }
        notyf.error(adminOrdersResponse.error);
      } catch (error) {
        console.log("ðŸš€ ~ fetchOrderData ~ error:", error)
        notyf.error(error)
      }
    }

    function formatDate(date) {
      return new Date(date).toLocaleString("en-IN", { timeZone: "Asia/Kolkata" });
    }
    const populateData = () => {
      const orderDetailsContainer = document.querySelector("#order-details")
      const orderDesignsContainer = document.querySelector("#order-items-body")
      const deliveryDetailsContainer = document.querySelector("#delivery-details")
      const totalDetailsContainer = document.querySelector("#deliv-details")
      document.querySelector("#order-id-heading").innerHTML = `Order ID: ${orderData.orderData.printwearOrderId} <h4 class="status-badge ${orderData.orderData.deliveryStatus}">${orderData.orderData.deliveryStatus}</h4> 
        <br />
        <span style="font-size: 14px">Received on: ${ new Date(orderData.orderData.createdAt).toLocaleString("en-IN", { timeZone: "Asia/Kolkata" }) }</span>
        `;
      document.querySelector("#order-status-filter").value = orderData.orderData.deliveryStatus;

      orderDetailsContainer.innerHTML = `
          <div id="billing-address">
              <h3>Billing Address:</h3>
              <p>Name: ${orderData.orderData.billingAddress?.firstName + ' ' + orderData.orderData.billingAddress?.lastName}</p>
              <p>Email: ${orderData.orderData.billingAddress?.email}</p>
              <p>Phone: ${orderData.orderData.billingAddress?.mobile}</p><br>
            </div>
            <div id="shipping-address">
              <h3>Shipping Address:</h3>
              <p>Name: ${orderData.orderData.shippingAddress?.firstName + ' ' + orderData.orderData.shippingAddress?.lastName}</p>
              <p>Email: ${orderData.orderData.shippingAddress?.email}</p>
              <p>Phone: ${orderData.orderData.shippingAddress?.mobile}</p>
              <p>${[
                  orderData.orderData.shippingAddress?.streetLandmark,
                  orderData.orderData.shippingAddress?.city,
                  orderData.orderData.shippingAddress?.pincode,
                  orderData.orderData.shippingAddress?.state,
                ].join(", ")}
              </p><br />
            </div>

            <div id="contact-details">
              <h3>Contact Details:</h3>
              <p>Email: ${orderData.orderData.billingAddress?.email}</p>
              <p>Mobile: ${orderData.orderData.billingAddress?.mobile}</p>
            </div>

            <div id="contact-details">
              <h3>Order Details:</h3>
              <p>Customer Reference Number: ${orderData.orderData.customerOrderId}</p>
              <p>Self-Pickup: ${orderData.orderData.shipRocketCourier.courierId == "-1" ? "Yes" : "No"}</p>
              <p>Retail Price: â‚¹ ${orderData.orderData.retailPrice}</p>
              <p>Cash On Delivery: ${orderData.orderData.cashOnDelivery ? "Yes" : "No"}</p>
              <p>Paid on: ${formatDate(orderData.orderData.createdAt)} via Wallet Payment (Transaction ID: ${orderData.orderData.walletOrderId})</p>
            </div>
            
            <div id="contact-details">
              <h3>User Details:</h3>
              <p>Merchant name: ${orderData.userData.name} ${orderData.userData.firstName ? ('(' + orderData.userData.firstName + ' ' + orderData.userData.lastName + ')'): ''}</p>
              <p>Merchant phone: ${orderData.userData.phone}</p>
              <p>Merchant email: ${orderData.userData.email}</p>
              <p>Merchant brand: ${orderData.userData.brandName ?? 'Not set'}</p>
              <p>Merchant wallet: <a href='/admin/wallets/${orderData.walletData._id}'>Click here</a></p>
              ${orderData.orderData.cashOnDelivery ? `<p>Merchant beneficiary id: ${orderData.userData.beneId}</p>`: ''}
            </div>
        `;

      orderDesignsContainer.innerHTML = orderData.orderData.items.map(order => {
        const currentDesign = JSON.parse(orderData.designsData)[0].designs.find(design => design._id == order.designId)
        const currentLabel = currentDesign.neckLabel? orderData.labelData.labels.find(label => label._id == currentDesign.neckLabel): null;
        if (!currentDesign) return ''
        if (currentDesign.designImage?.front.includes("printwear.in") && !currentDesign.designImage?.front.includes("admin.printwear.in")) {
          currentDesign.designImage.front = currentDesign.designImage.front.replace("printwear.in", "admin.printwear.in");
          currentDesign.designImage.back = currentDesign.designImage.back.replace("printwear.in", "admin.printwear.in");
        }
        currentDesign.designItems = currentDesign.designItems.map(item => {
          if (item?.URL?.includes("printwear.in") && !item?.URL?.includes("admin.printwear.in")) {
            return {
              ...item,
              URL: item.URL.replace("printwear.in", "admin.printwear.in")
            }
          } else {
            return item
          }
        })
        return `
            <tr>
              <td>
                <div>
                  ${currentDesign?.designImage?.front != "false" ? `<img style="width: 200px; object-fit: contain; cursor: pointer;" onclick="window.open(\'${currentDesign?.designImage?.front}\', '_blank')" src="${currentDesign?.designImage?.front}" /> <p style="font-size: 12px">(Front)</p>` : ''}
                  ${currentDesign?.designImage?.back != "false" ? `<img style="width: 200px; object-fit: contain; cursor: pointer;" onclick="window.open(\'${currentDesign?.designImage?.back}\', '_blank')" src="${currentDesign?.designImage?.back}" /> <p style="font-size: 12px">(Back)</p>` : ''}
                </div>
                <br />
                <h5>${currentDesign?.designName}</h5>
                <p>SKU: ${currentDesign?.designSKU}</p>
              </td>
              <td>
                <div style="display: flex; height: max-height; flex-direction: column; gap: 1rem">
                  <span>Base product: <p style="font-size: 14px">${currentDesign?.product.name} (${currentDesign?.product.SKU}) </p><span>
                  <a href="${currentDesign?.product?.baseImage?.front ?? ''}" target="_blank"><i class="fa fa-camera"></i></a>
                  <br />
                  <br />
                  <span>
                    Design Image: ${currentDesign?.designItems[0]?.URL === "undefined"? "Plain design": `
                      <br />
                      <a href="${currentDesign?.designItems[0]?.URL}" target="_blank" style="font-size: 14px">${currentDesign?.designItems[0]?.itemName} (${currentDesign?.frontPrice ? 'Front': 'Back'}) </a>
                      <br />
                      ${currentDesign?.designItems[1] ? 
                        `<a href="${currentDesign?.designItems[1]?.URL}" target="_blank" style="font-size: 14px">${currentDesign?.designItems[1]?.itemName} (Back) </a>`: ''
                      }
                    `}
                    </span>
                  <br />
                  <br />
                  ${currentLabel ? `
                    <span>
                      Neck Label: <a href="${currentLabel.url}" target="_blank" style="font-size: 14px">${currentLabel.name} </a>
                    </span>
                  `: ``}
                  <br />
                  <br />
                  <span>Base price: <p style="font-size: 14px">â‚¹ ${currentDesign?.product.price} </p></span>
                  <br />
                  <span>Design Dimensions: <p style="font-size: 13px">
                    ${currentDesign?.designDimensions && currentDesign?.designDimensions.width>0 ? '<p style="font-size: 13px"><strong>Front:</strong> Width:' + currentDesign?.designDimensions.width.toFixed(2) + ` in <br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Height: ${currentDesign?.designDimensions?.height.toFixed(2)}in </p>`: ''} 
                    ${currentDesign?.backDesignDimensions? '<p style="font-size: 13px"><strong>Back:</strong> Width:' + currentDesign?.backDesignDimensions.width.toFixed(2) + ` in <br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Height: ${currentDesign?.backDesignDimensions?.height.toFixed(2)}in </p>`: ''} 
                  </span>
                  <br />
                  <span>Design Offset: 
                  ${
                    (currentDesign?.designDimensions && currentDesign?.designDimensions.width > 0) ? 
                    `
                      <p style="font-size: 13px">\
                        <strong>Front:</strong> ${(currentDesign?.designDimensions?.top > 40 ? currentDesign?.designDimensions?.top / 25.4 : currentDesign?.designDimensions?.top).toFixed(2)}in from top, 
                      ${(currentDesign?.designDimensions?.left > 40 ? currentDesign?.designDimensions?.top / 25.4 : currentDesign?.designDimensions?.top).toFixed(2)}in from left
                      </p>
                    `: ''
                  }
                  ${
                    (currentDesign?.backDesignDimensions && currentDesign?.backDesignDimensions.width > 0) ? 
                    `
                      <p style="font-size: 13px">\
                        <strong>Back:</strong> ${(currentDesign?.backDesignDimensions?.top > 40 ? currentDesign?.backDesignDimensions?.top / 25.4 : currentDesign?.backDesignDimensions?.top).toFixed(2)}in from top, 
                      ${(currentDesign?.backDesignDimensions?.left > 40 ? currentDesign?.backDesignDimensions?.top / 25.4 : currentDesign?.backDesignDimensions?.top).toFixed(2)}in from left
                      </p>
                    `: ''
                  }
                  </span>
                  <br />
                  <span>Design Cost: <p style="font-size: 13px"><strong>â‚¹ ${(currentDesign?.price - currentDesign?.product.price).toFixed(2)} </strong></p></span>
                </div>
              </td>
              <td style="min-width: 6rem">â‚¹ ${currentDesign?.price?.toFixed(2)}</td>
              <td style="min-width: 3rem">${order.quantity}</td>
              <td style="min-width: 6rem">â‚¹ ${((currentDesign?.price * order.quantity)).toFixed(2)}</td>
            </tr>
        `}).join('\n');

      deliveryDetailsContainer.innerHTML = `
            <p>
              ${orderData.orderData.shipRocketCourier.courierId != "-1" ?
          `
                  <i class="fa fa-truck"></i>
                  Standard Shipping
                `:
          `
                  <i class="fa fa-person"></i>
                  Self-Pickup
                `
        }
            </p>
            <p>
              ${orderData.orderData.shipRocketCourier.courierId == "-1" ?
          `
                  Pickup date unknown
                `:
          `
                  by ${orderData.orderData.shipRocketCourier.courierName}
                  <br />
                  estimated delivery by ${orderData.orderData.shipRocketCourier.estimatedDelivery}
                `
        }
            </p>
            <p>Charges: â‚¹ ${orderData.orderData.shipRocketCourier.courierId == "-1" ?
          `
                  0
                `:
          `
                  ${orderData.orderData.deliveryCharges}
                `
        }</p>
          `

      totalDetailsContainer.innerHTML = `
              <table>
              <thead>
                <tr>
                  <th>Criteria</th>
                  <th>Price</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Order Total</td>
                  <td>â‚¹ ${(orderData.orderData.items.reduce((curr, item) => curr + item.price, 0)).toFixed(2)}</td>
                </tr>
                <tr>
                  <td>Delivery Charges</td>
                  <td>â‚¹ ${(orderData.orderData.deliveryCharges).toFixed(2)}</td>
                </tr>
                <tr>
                  <td>COD Charges</td>
                  <td>â‚¹ ${(orderData.orderData.cashOnDelivery ? 50 : 0).toFixed(2)}</td>
                </tr>
                <tr>
                  <td>Taxes</td>
                  <td>â‚¹ ${(orderData.orderData.taxes).toFixed(2)}</td>
                </tr>
                <tr>
                  <td><strong>Grand Total</strong></td>
                  <td><strong>â‚¹ ${(orderData.orderData.amountPaid).toFixed(2)}</strong></td>
                </tr>
              </tbody>
            </table>
        `
    }
    
    fetchOrderData();
  </script>
</body>

</html>