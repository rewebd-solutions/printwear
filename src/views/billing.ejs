<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/placeorder.css">
    <link rel="stylesheet" href="/css/billing.css">
    <link href='https://fonts.googleapis.com/css?family=Nunito' rel='stylesheet'>
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v6.0.0-beta3/css/all.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css">
    <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
    <title>Shipping</title>
</head>

<body>
    <div class="banner">
        <%- include('partials/side-logo.ejs') %>
            <%- include('partials/top.ejs') %>
    </div>
    <div class="order-wrapper">
        <div class="progressbar">
            <h2>Confirm Billing</h2>
        </div>
        <div class="steps" data-aos="fade-up">
            <div class="stp">
                <i class="fa-solid fa-briefcase"></i>
                <p>Order</p>
                <i class="fa-solid fa-arrow-right"></i>
            </div>
            <div class="stp">
                <i class="fa-solid fa-truck active-step"></i>
                <p class="active-step">Billing</p>
                <i class="fa-solid fa-arrow-right"></i>
            </div>
            <div class="stp">
                <i class="fa-solid fa-circle-check"></i>
                <p>Review</p>
            </div>
        </div>
        <% if (orderData.items.length > 0) { %>
            <div class="create-order-container" data-aos="fade-up">
                <div class="order-details">
                    <h3>Order Summary:</h3>
                    <ul class="orders-list">
                        <% designsData.forEach(design => { %>
                            <% const data = orderData.items.find(order => order.designId + "" == design._id + "") %>
                            <% if (data) { %>
                                <li>
                                    <img width="100" height="100" src="<%= design.designImage.front ? design.designImage.front: design.designImage.back  %>" alt="" />
                                    <div>
                                        <h4><%= design.designName %></h4>
                                        <h6><%= design.product.name %></h6>
                                    </div>
                                    <h5><%= data.quantity %> pcs </h5>
                                    <h5>₹.<%= data.price %> </h5>
                                </li>
                            <% } %>
                        <% }) %>
                    </ul>
                </div>
                <div class="retail-order-form">
                    <!-- <h3>Billing Address:</h3> -->
                    <div class="form-group">
                        <div>
                            <label for="customerOrderId">Your order ID:</label>
                            <input type="text" id="customerOrderId" placeholder="Order ID must be 10 characters long" title="Order ID must be 10 characters long!" name="customerOrderId" required>
                        </div>
        
                        <div>
                            <label for="retailPrice">Retail Price:</label>
                            <input type="text" id="retailPrice" name="retailPrice" required>
                        </div>
                    </div>
                </div>
                <div class="billing-address-form">
                    <h3>Billing Address:</h3>
                    <div class="form-group">
                        <div>
                            <label for="firstName">First name:</label>
                            <input type="text" id="firstName" name="firstName" required>
                        </div>
    
                        <div>
                            <label for="lastName">Last name:</label>
                            <input type="text" id="lastName" name="lastName" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            <label for="mobile">Mobile:</label>
                            <input type="text" pattern="^[789]\d{9}$" id="mobile" name="mobile" required>
                        </div>
    
                        <div>
                            <label for="email">Email:</label>
                            <input type="email" id="email" part="^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$" name="email" required>
                        </div>
                    </div>
                    <div class="form-group full-width">
                        <label for="streetLandmark">Street, Landmark:</label>
                        <input type="text" id="streetLandmark" name="streetLandmark" required>
                    </div>
                    <div class="form-group">
                        <div>
                            <label for="city">City:</label>
                            <input type="text" id="city" name="city" required>
                        </div>
    
                        <div>
                            <label for="pincode">Pincode:</label>
                            <input type="text" id="pincode" pattern="[1-9][0-9]{5}" name="pincode" required>
                        </div>
                    </div>
    
                    <div class="form-group full-width">
                        <label for="state">State:</label>
                        <select id="state" name="state" required>
                            <option value="Andhra Pradesh">Andhra Pradesh</option>
                            <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                            <option value="Assam">Assam</option>
                            <option value="Bihar">Bihar</option>
                            <option value="Chhattisgarh">Chhattisgarh</option>
                            <option value="Goa">Goa</option>
                            <option value="Gujarat">Gujarat</option>
                            <option value="Haryana">Haryana</option>
                            <option value="Himachal Pradesh">Himachal Pradesh</option>
                            <option value="Jammu and Kashmir">Jammu and Kashmir</option>
                            <option value="Jharkhand">Jharkhand</option>
                            <option value="Karnataka">Karnataka</option>
                            <option value="Kerala">Kerala</option>
                            <option value="Madhya Pradesh">Madhya Pradesh</option>
                            <option value="Maharashtra">Maharashtra</option>
                            <option value="Manipur">Manipur</option>
                            <option value="Meghalaya">Meghalaya</option>
                            <option value="Mizoram">Mizoram</option>
                            <option value="Nagaland">Nagaland</option>
                            <option value="Odisha">Odisha</option>
                            <option value="Punjab">Punjab</option>
                            <option value="Rajasthan">Rajasthan</option>
                            <option value="Sikkim">Sikkim</option>
                            <option value="Tamil Nadu" selected>Tamil Nadu</option>
                            <option value="Telangana">Telangana</option>
                            <option value="Tripura">Tripura</option>
                            <option value="Uttarakhand">Uttarakhand</option>
                            <option value="Uttar Pradesh">Uttar Pradesh</option>
                            <option value="West Bengal">West Bengal</option>
                            <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                            <option value="Chandigarh">Chandigarh</option>
                            <option value="Dadra and Nagar Haveli">Dadra and Nagar Haveli</option>
                            <option value="Daman and Diu">Daman and Diu</option>
                            <option value="Delhi">Delhi</option>
                            <option value="Lakshadweep">Lakshadweep</option>
                            <option value="Puducherry">Puducherry</option>
                        </select>
                    </div>
    
                    <div class="form-group full-width">
                        <label for="country">Country:</label>
                        <input type="text" id="country" name="country" value="India" disabled>
                    </div>
                </div>
                <div>
                    <input type="checkbox" name="cod-toggle" id="cod-toggle" />
                    <label for="cod-toggle">Cash on Delivery</label>
                </div>
                <div class="courier-pickup-wrapper">
                    <button class="billing-button" id="courier-check">Get available couriers</button>
                    <input type="checkbox" name="self-pickup" id="self-pickup" />
                    <label for="self-pickup">Pickup order myself</label>
                </div>
                <div class="bill-summary">
                    <div class="left-bill">
                        <h3>Bill total: </h3>
                    </div>
                    <div class="right-bill">
                        <h4>₹.<%= orderData.totalAmount %> </h4>
                        <h4 id="shipping-charges">₹0.00 (Shipping charges) </h4>
                        <div style="display: flex; gap: 0.5rem">
                            <h4 id="taxes">₹<%= (orderData.taxes).toFixed(2) %></h4>(CGST (2.5%) + SGST (2.5%))
                        </div>
                        <hr />
                        <h4 id="total-charges">₹<%=( orderData.totalAmount + orderData.taxes ).toFixed(2) %></h4>
                    </div>
                </div>
            </div>
            <% } else { %>
            <h2> Oops! You don't have anything in your cart! </h2>
        <% } %>
    </div>
    <script src="https://unpkg.com/aos@next/dist/aos.js"></script>
    <script>
        AOS.init();
        var notyf = new Notyf();
        var ttlp = "<%= orderData.totalAmount %>";
        var disabled = false;
        var orderIdVerified = false;
        var retailVerified = false;
        var itemCount = parseInt('<%= orderData.items.length %>');
        var isSelfPickup = false;

        const pincode = document.querySelector("#pincode");
        const orderIdInput = document.querySelector("input#customerOrderId");
        const retailPriceInput = document.querySelector("input#retailPrice");
        const billingAddressForm = document.querySelector(".billing-address-form");
        const courierGetBtn = document.querySelector("#courier-check");
        const courierPickupWrapper = document.querySelector(".courier-pickup-wrapper");
        const selfPickup = document.querySelector('#self-pickup');
        const billSummary = document.querySelector(".bill-summary");
        const CODtoggle = document.querySelector("#cod-toggle");

        const handleCheckout = async (e) => {
            if (disabled) return;
            disabled = true;
            e.target.classList.add("disabled");
            let hasRadioBeenChecked = false;
            let oldBtnInner = e.target.innerHTML;
            e.target.innerHTML = `<span class="loader-w"></span>`;

            if (orderIdInput.value.length < 3) {
                disabled = false;
                e.target.innerHTML = oldBtnInner;
                e.target.classList.remove("disabled");
                e.target.removeAttribute("disabled");
                return notyf.error("Order ID length should not be less than 3");
            }
            
            orderIdVerified = await checkOrderID(orderIdInput.value);
            
            if (!orderIdVerified) {
                disabled = false;
                e.target.innerHTML = oldBtnInner;
                e.target.classList.remove("disabled");
                e.target.removeAttribute("disabled");
                return notyf.error("Please check Order ID");
            }
            
            if (!retailVerified) {
                disabled = false;
                e.target.innerHTML = oldBtnInner;
                e.target.classList.remove("disabled");
                e.target.removeAttribute("disabled");
                return notyf.error("Please check retail price");
            }
            
            const formsData = document.querySelectorAll(".billing-address-form input");
            
            for(const inputItem of formsData){
                inputItem.style.outline = "none";
                if (!inputItem.reportValidity()) {
                    disabled = false;
                    e.target.innerHTML = oldBtnInner;
                    e.target.classList.remove("disabled");
                    return notyf.error("Check " + inputItem.id);
                }             
            }

            const radioInputBtns = document.querySelectorAll('input[type="radio"]');

            if (radioInputBtns) {
                radioInputBtns.forEach((radioBtn) => {
                    if (radioBtn.checked) hasRadioBeenChecked = true;
                });
    
                if (!hasRadioBeenChecked && isSelfPickup == false) {
                    disabled = false;
                    e.target.classList.remove("disabled");
                    e.target.innerHTML = oldBtnInner;
                    return notyf.error("Select a courier");
                }
            }

            const checkoutData = {
                firstName: formsData[0].value,
                lastName: formsData[1].value,
                mobile: formsData[2].value,
                email: formsData[3].value,
                streetLandmark: formsData[4].value,
                city: formsData[5].value,
                pincode: formsData[6].value,
                state: document.querySelector('#state').value,
                country: formsData[7].value,
                retailPrice: retailPriceInput.value,
                customerOrderId: orderIdInput.value,
                shippingCharge: 0,
                courierId: null,
                courierData: null,
                cashOnDelivery: CODtoggle.checked
            }

            if (!isSelfPickup) {
                checkoutData.shippingCharge = shippingCharge;
                checkoutData.courierId = courierId;
                checkoutData.courierData = shippingChargesResponse.data.available_courier_companies.find(courier => courier.courier_company_id == courierId);
            }

            console.log(checkoutData);

            try {
                openModal();
                const createPaymentLinkRequest = await fetch("/placeorder", {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(checkoutData),
                    method: 'POST'
                });
                const createPaymentLinkResponse = await createPaymentLinkRequest.json();
                console.log(createPaymentLinkResponse)
                if (!createPaymentLinkRequest.ok) {
                    disabled = false;
                    e.target.classList.remove("disabled");
                    e.target.innerHTML = oldBtnInner;
                    notyf.error({
                        message: createPaymentLinkResponse.message,
                    });
                    if (createPaymentLinkRequest.status == 403 && createPaymentLinkResponse.reason == "profile") return location.href = '/profile&return=true';
                    return;
                }
                notyf.success("Order created successfuly!");
                setTimeout(() => {
                    location.href = "/manageorder"
                    document.querySelector(".product-modal-wrapper").remove();
                }, 2000);
            } catch (error) {
                console.log(error);
                e.target.classList.remove("disabled");
                disabled = false;
                e.target.innerHTML = oldBtnInner;
                notyf.error("Something went wrong!");
            } finally {
                openModal(false);
            }
        }

        selfPickup.oninput = (e) => {
            const courierRadioBtns = document.querySelector('fieldset');
            if (e.target.checked) {
                isSelfPickup = true;
                if (CODtoggle.checked) {
                    document.getElementById("cod-charge").remove();
                    CODtoggle.checked = false;
                }
                modifyBillSummary(0.00);
                if (courierRadioBtns) {
                    console.log("radio btns iruku")
                    courierRadioBtns.style.display = "none";
                } else {
                    // document.querySelector("#taxes").innerHTML = `₹${(parseFloat(ttlp) + parseFloat(ttlp) * 0.05).toFixed(2)}`;
                    billSummary.insertAdjacentHTML("afterend", `
                    <button type="button" class="billing-button" id="btn-checkout">
                        Proceed to checkout
                    </button>
                    `)
                    document.querySelector("#btn-checkout").onclick = handleCheckout;
                }
                return;
            }
            isSelfPickup = false;
            if (courierRadioBtns) {
                courierRadioBtns.style.display = "unset";
                modifyBillSummary(shippingCharge);
            } else {

                document.querySelector("#btn-checkout").remove();
            }
        }

        CODtoggle.oninput = (e) => {
            if (e.target.checked) {
                if (isSelfPickup) return e.target.checked = false;
                document.getElementById("shipping-charges").insertAdjacentHTML("afterend", `<h4 id="cod-charge">₹50 (COD Charges)</h4>`);
                let totalPrice = document.getElementById("total-charges").innerHTML;
                let taxes = document.getElementById("taxes").innerHTML;

                taxes = `₹${(parseFloat(taxes.slice(1)) + (50 * 0.05)).toFixed(2)}`;
                totalPrice = `₹${(parseFloat(totalPrice.slice(1)) + 50 + (50 * 0.05)).toFixed(2)}`;

                document.getElementById("total-charges").innerHTML = totalPrice
                document.getElementById("taxes").innerHTML = taxes;

            } else {
                document.getElementById("cod-charge").remove();
                let totalPrice = document.getElementById("total-charges").innerHTML;
                let taxes = document.getElementById("taxes").innerHTML;

                taxes = `₹${(parseFloat(taxes.slice(1)) - (50 * 0.05)).toFixed(2)}`;
                totalPrice = `₹${(parseFloat(totalPrice.slice(1)) - 50 - (50 * 0.05)).toFixed(2)}`;

                document.getElementById("total-charges").innerHTML = totalPrice
                document.getElementById("taxes").innerHTML = taxes;
            }
        }

        retailPriceInput.oninput = (e) => {
            let string = e.target.value;
            e.target.value = string.replace(/ /g, '').replace(/[^.0-9-_]/g, '');
            if (e.target.value.length < ttlp.split(".")[0].length) return retailVerified = false;
            // check if the number of digits in design price and retail price are same and then check if it is greater or not
            if (parseFloat(e.target.value) <= parseFloat(document.querySelector("#total-charges").innerHTML.slice(1))) {
                retailVerified = false;
                return notyf.error("Retail price is less than billing total!");
            } else {
                retailVerified = true;
                return notyf.success("Retail price set");
            }
        }

        const checkOrderID = async (orderId) => {
            try {
                const checkOrderIDRequest = await fetch ("/checkorderid", { 
                    method: "POST",
                    body: JSON.stringify({
                        customerOrderId: orderId
                    }),
                    headers: {
                        "Content-Type": "application/json"
                    }
                });
                const checkOrderIDResponse = await checkOrderIDRequest.json();
                if (checkOrderIDRequest.ok) {
                    return true;
                }
                return false;
            } catch (error) {
                console.log(error);
                notyf.error("Something went wrong in checking Order ID");
                return true; // i return true bcs dont want customer to get stuck bcs of internal server error
            }
        }

        orderIdInput.oninput = async (e) => {
            let string = e.target.value;
            e.target.value = string.replace(/ /g, '-').replace(/[^a-zA-Z0-9-_]/g, '').toUpperCase();
        }
        
        const modifyBillSummary = (charges) => {
            document.getElementById("shipping-charges").innerHTML = `₹${charges.toFixed(2)} (Shipping charges)`;
            let tt = parseFloat(ttlp) + charges + (CODtoggle.checked ? 50 : 0);
            document.getElementById("total-charges").innerHTML = `₹${(tt + tt*0.05).toFixed(2)}`;
            document.getElementById("taxes").innerHTML = `₹${((parseFloat(ttlp) + charges + (CODtoggle.checked ? 50 : 0)) * 0.05).toFixed(2)}`;
        }
        
        let oldPincode = pincode.value;
        const getAvailableCouriers = async (e) => {
            // check for spamming check available couriers
            if (oldPincode == pincode.value) return;
            oldPincode = pincode.value;

            if (!(pincode.value.length == 6)) return notyf.error("Pincode does not have 6 digits");
            e.target.classList.add("disabled");
            e.target.setAttribute("disabled", true);

            try {
                const shippingChargesRequest = await fetch("/calculateshippingcharges", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        weight: itemCount * 0.25,
                        pincode: pincode.value,
                        cod: CODtoggle.checked
                    })
                });
                shippingChargesResponse = await shippingChargesRequest.json();
                console.log(shippingChargesResponse)
                if (!shippingChargesRequest.ok) return notyf.error({ message: shippingChargesResponse.message });

                // code to create a radio group
                const availableCouriers = shippingChargesResponse.data.available_courier_companies;
                const availableCouriersUI = document.querySelector(".available-couriers");
                if (availableCouriersUI) {
                    availableCouriersUI.remove();
                    document.querySelector("#btn-checkout").remove();
                }
                courierPickupWrapper.insertAdjacentHTML("afterend", `
                    <div class="available-couriers">
                        <fieldset>
                            <legend>Select a courier:</legend>
                            ${availableCouriers.map(courier => {
                                return `
                                    <div>
                                        <input type="radio" id="${courier.courier_company_id}" name="Couriers" value="${courier.courier_company_id}" />
                                        <label for="${courier.courier_company_id}">${courier.courier_name} <h5>Delivery charge: ₹${courier.freight_charge}</h5> <h5>Delivery Date: ${courier.etd}</h5> ${shippingChargesResponse.data.recommended_courier_company_id == courier.courier_company_id ? '<h6>RECOMMENDED</h6>': ''} </label>
                                    </div>
                                `
                            }).join('\n')}
                        </fieldset>                        
                    </div>
                    </div>
                `);

                billSummary.insertAdjacentHTML('afterend', `
                    <button type="button" class="billing-button" id="btn-checkout">
                        Confirm and Proceed to checkout
                    </button>                    
                `);

                const courierRadioBtns = document.querySelector('fieldset');
                courierRadioBtns.addEventListener('click', (e) => {
                    let el = e.target.closest('input[type="radio"]');
                    if (el && el.checked) {
                        shippingCharge = availableCouriers.find(courier => courier.courier_company_id == e.target.value).freight_charge;
                        courierId = el.value;
                        modifyBillSummary(shippingCharge);
                    }
                })
                
                const checkoutBtn = document.querySelector("#btn-checkout");
                document.querySelector("#btn-checkout").onclick = handleCheckout;

            } catch (error) {
                console.log(error);
                notyf.error("Something went wrong in obtaining couriers");
            } finally {
                e.target.removeAttribute("disabled");
                e.target.classList.remove("disabled");
            }
        }
        
        courierGetBtn.onclick = getAvailableCouriers;

        const openModal = (state = true) => {
            if (state == false) {
                document.querySelector(".product-modal-wrapper").remove()
                return;
            };
            const designModalDOMString = `
            <div class="product-modal-wrapper">
                <div class="product-modal" data-aos="fade-up">             
                    <span class="loader"></span>
                    <h2 style="margin-top: 3rem;">Please wait while your order is being created</h2>
                    <h4 style="color: #F05A30">Do not close this page or refresh the page!</h4>
                </div>
            </div>
            `;
            document.querySelector(".order-wrapper").insertAdjacentHTML("beforeend", designModalDOMString);
    }
        
    </script>
</body>

</html>