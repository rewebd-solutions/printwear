<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/placeorder.css">
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"
        integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" /> -->
    <link href='https://fonts.googleapis.com/css?family=Nunito' rel='stylesheet'>
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v6.0.0-beta3/css/all.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css">
    <script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
    <title>Place Order</title>
</head>

<body>
    <div class="banner">
        <%- include('partials/side-logo.ejs') %>
            <%- include('partials/top.ejs') %>
    </div>
    <div class="order-wrapper">

        <div class="progressbar">
            <h2>CREATE ORDER</h2>
        </div>
        <div class="steps" data-aos="fade-up">
            <div class="stp">
                <i class="fa-solid fa-briefcase active-step"></i>
                <p class="active-step">Order</p>
                <i class="fa-solid fa-arrow-right"></i>
            </div>
            <div class="stp">
                <i class="fa-solid fa-truck"></i>
                <p>Billing</p>
                <i class="fa-solid fa-arrow-right"></i>
            </div>
            <div class="stp">
                <i class="fa-solid fa-circle-check"></i>
                <p>Review</p>
            </div>
        </div>
        <div class="create-order-container" data-aos="fade-up">
            <span class="loader"></span>
            <!-- <button type="button" onclick="openModal()" id="toggle-modal">
                Choose design
            </button> -->
        </div>
        <!-- put anythign here, but not after backdrop-->
    </div>
    </div>
    <script src="https://unpkg.com/aos@next/dist/aos.js"></script>
    <script>
        AOS.init();

        var notyf = new Notyf();

        var designLibraryData;
        var quickAddData;

        const createOrderContainer = document.querySelector(".create-order-container");

        var orderData = [];

        var throttleTimer;
        var throttlDelay = 1000;

        const createTableRow = (designObject, sno) => {
            const row = document.createElement("tr");

            const SNoCell = document.createElement("td");
            SNoCell.textContent = sno;

            const nameCell = document.createElement("td");
            nameCell.textContent = designObject.designName;

            const skuCell = document.createElement("td");
            skuCell.textContent = designObject.designSKU
            
            const priceCell = document.createElement("td");
            priceCell.textContent = '₹' + designObject.price
            
            const previewCell = document.createElement("td");
            previewCell.innerHTML = `<img class="design-preview-image" src=${designObject.designImage.front?? designObject.designImage.back} />`
            
            const actionCell = document.createElement("td");
            actionCell.innerHTML = `<button onclick="addToOrder(event, '${designObject.designSKU}')">Add to order</button>`

            row.appendChild(SNoCell);
            row.appendChild(nameCell);
            row.appendChild(skuCell);
            row.appendChild(priceCell);
            row.appendChild(previewCell);
            row.appendChild(actionCell);

            designLibraryData.appendChild(row);
        }
        
        const debounceUpdateQuantity = (e, i, designId, price) => {
            if (!throttleTimer) {
                throttleTimer = setTimeout(async () => {
                    try {
                        updateQuantity(e, i, designId, price);
                    } catch (error) {
                        console.log(error + " from debounce");
                    } finally {
                        throttleTimer = null;
                    }
                }, throttlDelay);
            }
        }

        const populateDesignWidget = (data = designDataResponse) => {
            designLibraryData.innerHTML = '';
            if (data.designs.length < 1) return designLibraryData.innerHTML = 'No designs yet!'
            data.designs.forEach((design, i) => createTableRow(design, i+1));
        }

        const populateOrderTable = (data = orderData) => {
            //console.log(data)
            if (data.length < 1) return createOrderContainer.innerHTML = `
            <p>Add a product to start creating your order</p>
            <button type="button" onclick="openModal()" id="toggle-modal" class="option-button">
                <i class="fa fa-circle-plus"></i>
                Choose design
            </button>`;
            createOrderContainer.innerHTML = `
            <button type="button" onclick="openModal()" id="toggle-modal" class="option-button">
                <i class="fa fa-circle-plus"></i>
                Choose design
            </button>
            <table class="order-table">
                <thead>
                    <tr>
                        <td>S.NO</td>
                        <td>DETAILS</td>
                        <td>DESIGN</td>
                        <td>PRICE</td>
                        <td>QUANTITY</td>
                        <td>TOTAL</td>
                    </tr>
                </thead>
                <tbody id="order-data">
                    `;
            document.querySelector("#order-data").innerHTML += data.map((order, i) => `
                    <tr>
                        <th>${i+1}</th>
                        <th class="order-details">
                            <div class="order-text">Product Name: <h4 class="order-product-name">${order.product.name}</h4></div>
                            <div class="order-text">Design Name: <h4 class="order-product-name">${order.designName}</h4></div>
                            <div class="order-text">SKU: <h4 class="order-product-SKU">${order.designSKU}</h4></div>
                            <div class="order-text">Color: <h4 class="order-product-color">${order.product.color}</h4></div>
                            <div class="order-text">Size: <h4 class="order-product-size">${order.product.size}</h4></div>
                        </th>
                        <th class="order-images">
                            <div class="order-image-container">
                                ${order.designImage.front !== 'false' ? `
                                <div>
                                    <h4>Front design</h4>
                                    <a target="_blank" href="${order.designImage.front}">
                                    <img src="${order.designImage.front}"
                                    alt="${order.designName}-front"></a>
                                </div>
                                `: ''}
                                ${order.designImage.back !== 'false' ? `
                                <div>
                                    <h4>Back design</h4>
                                    <a target="_blank" href="${order.designImage.back}">
                                    <img src="${order.designImage.back}"
                                    alt="${order.designName}-back"></a>
                                </div>
                                `: ''}
                            </div>
                        </th>
                        <th>
                            ₹${order.price} <i class="fa fa-info-circle" onmouseover="console.log(event.target.className)" onmouseout="console.log('gone')"></i>
                        </th>
                        <th>
                            <div class="delete-container">
                                <input type="number" value="${order.quantity || 1}" min="1" onchange="debounceUpdateQuantity(event, ${i}, '${order._id}', ${order.price})" name="quantity" class="order-qty" />
                                <button class="delete-order" onclick="deleteOrder(this, '${order._id}')"><i class="fa fa-trash"></i></button>
                            </div>
                        </th>
                        <th>
                            ₹${order.totalPrice || order.price}
                        </th>
                    </tr>
            `).join('');
            createOrderContainer.innerHTML += `
            </tbody></table>
            <div id="total-price" style="display: flex; justify-content: flex-end; padding: 0.4rem;"><h4>Total Price: ₹ ${orderDataResponse.orderData.items.reduce((total, curr) => total + curr.price, 0).toFixed(2)}</h4> </div>
            <a href="/placeorder/billing"><button type="button" class="option-button">Proceed to Shipping</button></a>
            `
        }

        const updateQuantity = async (e, i, designId, price) => {
            let quantityToSet = e.target.value;
            try {
                const updateQuantityRequest = await fetch("/updateorder", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        designId,
                        quantity: quantityToSet,
                        price
                    })
                });
                const updateQuantityResponse = await updateQuantityRequest.json();
                if (updateQuantityRequest.ok) {
                    document.querySelector(".order-table").lastChild.children[i].children[5].innerHTML = '₹' + (price*quantityToSet).toFixed(2);
                    orderData.find(order => order._id == designId).quantity = parseInt(quantityToSet);
                    document.querySelector("#total-price h4").innerHTML = "Total Price: ₹" + updateQuantityResponse.totalPrice;
                    return notyf.success("Updated quantity!");
                } else {
                    return notyf.error("Couldn't increment quantity");
                }
            } catch (error) {
                console.log(error);
                return notyf.error("Something went wrong!");
            }

        }

        const fetchDesigndata = async () => {
            try {
                const designDataRequest = await fetch("/getdesigns");
                designDataResponse = await designDataRequest.json();
                console.log(designDataResponse);
                designDataResponse.designs.forEach(design => design.isAddedToOrder = false);
                if (!designDataRequest.ok) {
                    return notyf.error("Error loading data. Please refresh or check connection");
                }
            } catch (error) {
                console.log(error);
                notyf.error("Something went wrong!")
            }
        }

        const deleteOrder = async (el, designId) => {
            //console.log(designId)
            let delButtonContent = el.innerHTML;
            try {
                el.innerHTML = `<span class="loader"></span>`;
                const deleteOrderRequest = await fetch("/deleteorderitem", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        designId: designId
                    })
                });
                const deleteOrderResponse = await deleteOrderRequest.json();
                //console.log(deleteOrderResponse);
                if (!deleteOrderRequest.ok) return notyf.error("Couldn't delete item!");
                orderData = orderData.filter(order => order._id !== designId);
                orderDataResponse.orderData = deleteOrderResponse;
                //console.log(orderData);
                populateOrderTable();
                notyf.success("Deleted item successfully!");
            } catch (error) {
                console.log(error);
                el.innerHTML = delButtonContent;
                return notyf.error("Something went wrong!");
            }
        }

        const fetchOrderData = async () => {
            // write function to fetch orders and save to orderData // best EXAMPLE OF FETCHING
            try{
                const orderDataRequest = await fetch("/getorders");
                orderDataResponse = await orderDataRequest.json();
                console.log(orderDataResponse);

                if (!orderDataRequest.ok) {
                    populateOrderTable()
                    return notyf.error(orderDataResponse.message || "Something went wrong!");
                }
                
                orderData = orderDataResponse.designsData[0].designs.map(design => {
                    let designFromOrder = orderDataResponse.orderData.items.find(item => item.designId == design._id);
                    if (designFromOrder){
                        return {
                            ...design,
                            totalPrice: designFromOrder.price,
                            quantity: parseInt(designFromOrder.quantity)
                        }
                    }
                });
                populateOrderTable()
            } catch (error) {
                console.log(error);
                return notyf.error("Something went wrong!");
            }
        }
        
        const openModal = () => {
            document.querySelector(".order-wrapper").insertAdjacentHTML("beforeend", `
            <div class="create-order-modal-backdrop">
                <div class="create-order-modal" data-aos="fade-up">
                    <div class="create-order-controls">
                        <div class="create-order-selection">
                            <button id="design-library" class="active-btn" onclick="showWidget(event, 1)">Design Library</button>
                            <button id="quick-add" onclick="showWidget(event, 2)">Quick Add</button>
                            <button id="quick-add" onclick="location.href='/productgallery'">Add new product</button>
                        </div>
                        <button class="close-modal" onclick="closeModal()">
                            <i class="fa fa-close"></i>
                        </button>
                    </div>
                    <div class="create-order-forms">
                        <div class="design-library-wrapper" data-widgetno="1">
                            <div class="library-search-container">
                                <div><label for="design-search">Search by design name</label><input type="search" oninput="searchDesigns('designName', event.target.value)" placeholder="" name="design-search" id="design-search" /></div>
                                <div><label for="sku-search">Search by SKU</label><input type="search" oninput="searchDesigns('designSKU', event.target.value)" placeholder="" name="sku-search" id="sku-search" /></div>
                            </div>
                            <table>
                                <thead>
                                    <tr>
                                        <th>S.No.</th>
                                        <th>Name</th>
                                        <th>SKU</th>
                                        <th>Price</th>
                                        <th>Preview</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="library-data">
                                        
                                </tbody>
                            </table>
                        </div>
                        <div class="quick-add-wrapper" data-widgetno="2">
                            <div><label for="sku-search-2">Quickly add order by entering your design SKU</label><input oninput="searchSKU(event.target.value)" type="search" name="sku-search" id="sku-search-2" placeholder="Enter SKU..." /></div>
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>SKU</th>
                                        <th>Price</th>
                                        <th>Preview</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="quick-add-data">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            `);

            designLibraryData = document.getElementById("library-data");
            quickAddData = document.getElementById("quick-add-data");

            populateDesignWidget();
        }

        const closeModal = () => {
            document.querySelector(".create-order-modal-backdrop").remove();
        }
        
        const showWidget = (e, widgetNo) => {
            const widgetElements = document.querySelectorAll('[data-widgetno]');
            const selectionButtons = document.querySelectorAll('.create-order-selection button');
            selectionButtons.forEach(button => button.classList.remove('active-btn'));
            e.target.classList.add('active-btn');
            widgetElements.forEach(widgetElem => widgetElem.dataset.widgetno != widgetNo ? widgetElem.style.display = "none": widgetElem.style.display = "flex");
        }

        const addToOrder = async (e, searchSKU) => {
            e.target.classList.add("disable-button");
            // check if already that design exists, if not, add.. disable button in fetchOrderData() after fetchDesignData() and add new key
            if (orderData.find(order => order.designSKU == searchSKU)) {
               e.target.classList.remove("disable-button"); 
                return notyf.error("Design already added to order");
            }
            const designData = designDataResponse.designs.find(design => design.designSKU == searchSKU);
            orderData.push(designData);
            console.log(designData, orderData);
            // probably a call to backend to store order data
            try {
                const addOrderRequest = await fetch("/createorder", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        designId: designData._id,
                        productId: designData.productId,
                        price: designData.price
                    })
                });
                const addOrderResponse = await addOrderRequest.json();
                if (!addOrderRequest.ok) {
                    console.log(addOrderResponse);
                    e.target.classList.remove("disable-button");
                    return notyf.error("Couldn't add to cart!");
                }
                e.target.classList.remove("disable-button");
                orderDataResponse.orderData = addOrderResponse;
                populateOrderTable();
                notyf.success("Design added to orders");
                console.log(addOrderResponse);
            } catch (error) {
                console.log(error);
                e.target.classList.remove("disable-button");
                return notyf.error("Something went wrong!");
            }
        }

        const searchDesigns = (dataKey, searchKey) => {
            if (searchKey === '') return populateDesignWidget();
            const designsData = designDataResponse.designs.filter(design => design[dataKey].toLowerCase().trim().includes(searchKey.toLowerCase().trim()));
            if (designsData.length < 1) return designLibraryData.innerHTML = 'Invalid search key';
            populateDesignWidget({designs: designsData})
        }

        const searchSKU = (searchSKU) => {
            if (searchSKU === '') return quickAddData.innerHTML = '';
            const designItem = designDataResponse.designs.find(design => design.designSKU.trim() == searchSKU.trim() || design.designSKU.split("-")[2].trim() === searchSKU.trim());
            console.log(searchSKU, designItem)
            if (!designItem) return quickAddData.innerHTML = 'Invalid SKU';
            quickAddData.innerHTML = `
            <tr>
                <td>${designItem.designName}</td>
                <td>${designItem.designSKU}</td>
                <td><img class="design-preview-image" src="${designItem.designImage.front}"></td>
                <td><button onclick="addToOrder('${designItem.designSKU}')">Add to order</button></td>
            </tr>
            `;
        }

        fetchOrderData();
        fetchDesigndata();
    </script>
</body>

</html>