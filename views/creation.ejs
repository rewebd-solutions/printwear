<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/creation.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"
        integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href='https://fonts.googleapis.com/css?family=Nunito' rel='stylesheet'>
    <title>Creation</title>
    <script src="jscolor.js"></script>
    <script src="fabric.min.js"></script>
</head>

<body>
    <div class="creation">
        <div class="top">
            <div class="logo">
                <img src="/images/Logo.png" id="logo">
            </div>
            <div class="top-icons">
                <i class="fa-solid fa-wallet fa-lg" id="icon"></i>
                <p>$4500</p>
                <i class="fa-solid fa-arrows-rotate fa-lg" id="icon"></i>
                <i class="fa-solid fa-cart-shopping fa-lg" id="icon"></i>
            </div>
        </div>
        <div class="progressbar">
            <h2>DESIGN GALLERY</h2>
            <img src="/images/progressbar.png" id="pg-bar">
        </div>
        <div class="creation-main">
      
            <div class="creation-left">
                <div class="main-box">
                    <div class="creation-card">
                      
                        <div class="front">
                            <img src="/images/front-tshirt-black.png" id="front-tshirt">
                        </div>
                    
                        <div class="back">
                            <img src="/images/back-tshirt-black.png" id="back-tshirt">
                        </div>
                    </div>
                </div>
            </div>
        
            <div class="arrow"><button onclick="flip()"><i class="fa-solid fa-angle-right fa-5x"></i></button></div>

            <div class="creation-right">
                <div class="insert-img">
                    <label class="label">
                        <input type="file" id="myImg" accept="images/*" required />
                        <img src="/images/cloud-upload.png" id="upload-img">
                        <p>Drop one or more files here</p>
                    </label>
                    <p>Drop your design as png or jpeg file format</p>
                    <p id="img-p">Lorem ipsum dolor sit amet consectetur adipiscing
                        elit, sed do eiusmod tempor incididunt ut aliquip ex ea
                        commodo consequat. Duis aute irure dolor in reprehenderit
                    </p>
                </div>
                <div class="loc">
                    <i class="fa-solid fa-magnifying-glass" id="loc-icon"></i>
                    <input type="text" id="location" placeholder="Enter Your Postal Code/Area Name">
                </div>
                <button id="chk-avail">Check Availability</button>
                <div class="colors">
                    <button id="black" onclick="frontcolorblack()"></button>
                    <button id="white" onclick="frontcolorwhite()"></button>
                    <button id="red" onclick="frontcolorred()"></button>
                </div>
                <p id="click">Click Black again to select size</p>
                <button id="proceed">Proceed</button>
            </div>
        </div>
    </div>
    <script>
        const card = document.querySelector('.creation-card');
        const ftshirt = document.querySelector('#front-tshirt');
        const btshirt = document.getElementById('back-tshirt');
        function flip() {
            card.classList.toggle('is-flipped');
        
        }
        function frontcolorred() {
            ftshirt.src="/images/front-tshirt-red.png";
            btshirt.src="/images/back-tshirt-red.png";
            ftshirt.style.height="300px";
            ftshirt.style.width="fit-content";
            btshirt.style.height="300px";
            btshirt.style.width="fit-content";
        }
        function frontcolorwhite() {
            ftshirt.src="/images/front-tshirt-white.png";
            btshirt.src="/images/back-tshirt-white.png";
            ftshirt.style.height="350px";
            ftshirt.style.width="fit-content";
            btshirt.style.height="400px";
            btshirt.style.width="fit-content";
        }
        function frontcolorblack() {
            ftshirt.src="/images/front-tshirt-black.png";
            btshirt.src="/images/back-tshirt-black.png";
            ftshirt.style.height="400px";
            ftshirt.style.width="fit-content";
            btshirt.style.height="400px";
            btshirt.style.width="fit-content";
        }
       
        //index script///



        const initCanvas = (id) => {
    return new fabric.Canvas(id, {
        width: 500,
        height: 500,
        selection: false
    });
}

const setBackground = (url, canvas) => {
    fabric.Image.fromURL(url, (img) => {
        //canvas.backgroundImage = img
        canvas.renderAll()
    })
}

const toggleMode = (mode) => {
    if (mode === modes.pan) {
        if (currentMode === modes.pan) {
            currentMode = ''
        } else {
            currentMode = modes.pan
            canvas.isDrawingMode = false
            canvas.renderAll()
        }
    } else if (mode === modes.drawing) {
        if (currentMode === modes.drawing) {
            currentMode = ''
            canvas.isDrawingMode = false
            canvas.renderAll()
        } else {
            currentMode = modes.drawing
            canvas.freeDrawingBrush.color = color
            canvas.isDrawingMode = true
            canvas.renderAll()
        }      
    }
}

const setPanEvents = (canvas) => {
    canvas.on('mouse:move', (event) => {
        // console.log(event)
        if (mousePressed && currentMode === modes.pan) {
            canvas.setCursor('grab')
            canvas.renderAll()
            const mEvent = event.e
            const delta = new fabric.Point(mEvent.movementX, mEvent.movementY)
            canvas.relativePan(delta)
        }
    })
    // keep track of mouse down/up
    canvas.on('mouse:down', (event) => {
        mousePressed = true;
        if (currentMode === modes.pan) {
            canvas.setCursor('grab')
            canvas.renderAll()
        }
    })
    canvas.on('mouse:up', (event) => {
        mousePressed = false
        canvas.setCursor('default')
        canvas.renderAll()
    })
}

const setColorListener = () => {
    const picker = document.getElementById('colorPicker')
    picker.addEventListener('change', (event) => {
        console.log(event.target.value)
        color = '#' + event.target.value
        canvas.freeDrawingBrush.color = color
        canvas.requestRenderAll()
    })
}

const clearCanvas = (canvas, state) => {
    state.val = canvas.toSVG()
    canvas.getObjects().forEach((o) => {
        if(o !== canvas.backgroundImage) {
            canvas.remove(o)
        }
    })
}

const restoreCanvas = (canvas, state, bgUrl) => {
    if (state.val) {
        fabric.loadSVGFromString(state.val, objects => {
            console.log(objects)
            objects = objects.filter(o => o['xlink:href'] !== bgUrl)
            canvas.add(...objects)
            canvas.requestRenderAll()
        })
    }
}



const createRect = (canvas) => {
    console.log("rect")
    const canvCenter = canvas.getCenter()
    const rect = new fabric.Rect({
        width: 100,
        height: 100,
        fill: 'green',
        left: canvCenter.left,
        top: -50,
        originX: 'center',
        originY: 'center',
        cornerColor: 'white'
    })
    canvas.add(rect)
    
    rect.animate('top', canvCenter.top, {
        onChange: canvas.renderAll.bind(canvas)
    });
    rect.on('selected', () => {
        rect.set('fill', 'white')
        canvas.renderAll()
    })
    rect.on('deselected', () => {
        rect.set('fill', 'green')
        canvas.renderAll()
    })
    // canvas.renderAll();
}

const createCirc = (canvas) => {
    console.log("circ")
    const canvCenter = canvas.getCenter()
    const circle = new fabric.Circle({
        radius: 50,
        fill: 'orange',
        left: canvCenter.left,
        top: -50,
        originX: 'center',
        originY: 'center',
        cornerColor: 'white'
    })
    canvas.add(circle)
    canvas.renderAll()
    circle.animate('top', canvas.height - 50, {
        onChange: canvas.renderAll.bind(canvas),
        onComplete: () => {
            circle.animate('top', canvCenter.top, {
                onChange: canvas.renderAll.bind(canvas),
                easing: fabric.util.ease.easeOutBounce,
                duration: 200
            })
        }
      });
    circle.on('selected', () => {
        circle.set('fill', 'white')
        canvas.requestRenderAll()
    })
    circle.on('deselected', () => {
        circle.set('fill', 'orange')
        canvas.requestRenderAll()
    })
}

const groupObjects = (canvas, group, shouldGroup) => {
    if (shouldGroup) {
        const objects = canvas.getObjects()
        group.val = new fabric.Group(objects, {cornerColor: 'white'})
        clearCanvas(canvas, svgState)
        canvas.add(group.val)
        canvas.requestRenderAll()
    } else {
        group.val.destroy()
        let oldGroup = group.val.getObjects()
        clearCanvas(canvas, svgState)
        canvas.add(...oldGroup)
        group.val = null
        canvas.requestRenderAll()
    }
}

const imgAdded = (e) => {
    console.log(e)
    const inputElem = document.getElementById('myImg')
    const file = inputElem.files[0];
    reader.readAsDataURL(file)
}

const canvas = initCanvas('canvas')
const svgState = {}
let mousePressed = false
let color = '#000000'
const group = {}
const bgUrl ="https://cdn.pixabay.com/photo/2014/03/24/13/42/t-shirt-294078__340.png"

let currentMode;

const modes = {
    pan: 'pan',
    drawing: 'drawing'
}
const reader = new FileReader()

setColorListener()
setBackground(bgUrl, canvas)
setPanEvents(canvas)

const inputFile = document.getElementById('myImg');
inputFile.addEventListener('change', imgAdded)

reader.addEventListener("load", () => {
    fabric.Image.fromURL(reader.result, img => {
        canvas.add(img)
        canvas.requestRenderAll()
    })
})




        //index script///



    </script>
</body>

</html>