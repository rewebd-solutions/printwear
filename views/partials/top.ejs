<style>
  @font-face {
    font-family: myFont;
    src: url('/css/BaseNeueTrial-SemiBoldOblique.ttf');
  }

  .loader-w {
    width: 14px;
    height: 14px;
    border: 2px solid #FFF;
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
  }

  @keyframes rotation {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  .navbar-top {
    display: flex;
    justify-content: space-between;
    padding: 1rem;
    font-family: myFont, 'sans-serif';
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: fixed;
    top: 0;
    width: 100%;
    background-color: white;
    left: 0;
    z-index: 100;
    letter-spacing: 0.05rem;
  }

  .top-icons {
    display: flex;
    justify-content: space-evenly;
    /* border: solid; */
    font-size: 20px;
    color: #000;
  }

  .navbar-logo {
    margin-left: 1rem !important;
  }

  .nav-icons {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.6rem;
  }

  .design-upload-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    background: rgba(0, 0, 0, 0.252);
    height: 100vh;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .design-upload-modal {
    padding: 1rem;
    display: flex;
    width: 80%;
    background-color: white;
    flex-direction: column;
    height: 80%;
    position: relative;
    gap: 1rem;
    overflow-y: scroll;
  }

  .modal-controls {
    display: flex;
    justify-content: flex-end;
  }

  .modal-close-button {
    right: 1rem;
    top: 1rem;
    width: 2rem;
    border: none;
    cursor: pointer;
    aspect-ratio: 1;
    border-radius: 50%;
  }

  #user-image-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    justify-content: center;
    border: 2px dashed rgba(0, 0, 0, 0.252);
    padding: 2rem;
    background-color: #F5F1F1;
    text-align: center;
    border-radius: 1rem;
  }

  .file-input {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    border-radius: 10px;
    padding: 3rem;
    cursor: pointer;
  }

  #file-input {
    display: none;
  }

  .design-image-wrapper {
    display: flex;
    position: relative;
    flex-direction: column;
    width: 250px;
    height: fit-content;
    border-radius: 10px;
    box-shadow: 0 0 10px #0000004b;
  }

  .image-menu {
    display: flex;
    position: absolute;
    flex-direction: column;
    padding: 0.5rem 1rem;
    top: 1.7rem;
    right: 0.2rem;
  }

  .image-settings {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 2rem;
    aspect-ratio: 1;
    position: absolute;
    top: 0.4rem;
    right: 0.4rem;
    border: none;
    cursor: pointer;
    border-radius: 50%;
    font-weight: bold;
  }


  .image-settings-2 {
    right: 2.9rem;
  }

  .image-details h6,
  .image-details p {
    font-family: 'Arial', sans-serif;
    letter-spacing: normal;
    padding: 0.3rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 1rem;
  }

  .design-image-meta {
    display: flex;
    justify-content: space-between;
  }

  .design-image {
    width: 100%;
    height: 250px;
    object-fit: contain;
  }

  .user-images {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem
  }

  .top-nav-btn {
    color: white;
    font-size: 0.9rem;
    background-color: #F05A30;
    padding: 0.5rem 0.7rem;
    border-radius: 0.5rem;
    text-decoration: none;
    cursor: pointer;
  }

  .dropdown-menu {
    display: flex;
    flex-direction: column;
    position: relative;
    align-items: center;
    justify-content: center;
  }

  .dropdown-menu-items {
    display: none;
    position: absolute;
    top: 120%;
    left: -150%;
    transform: translateX(50%);
    flex-direction: column;
    gap: 0.2rem;
    background: white;
    border-radius: 6px;
    padding: 0.5rem 0.3rem;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.08);
  }

  .dropdown-link {
    padding: 0.2rem 0.6rem;
    width: 100%;
    color: black;
    font-size: 14px;
    text-decoration: none;
  }

  .dropdown-link:hover {
    background: #F05A30;
    color: white;
  }
</style>
<div class="navbar-top">
  <div class="navbar-logo">
    <img src="/images/Logo.png" id="logo">
  </div>
  <div class="nav-icons">
    <div class="dropdown-menu">
      <a class="top-nav-btn" id="wall" onclick="toggleWallet(this)">
        <i style="font-size: 16px;" class="fa fa-wallet"></i> <span class="loader-w"></span>
        <i style="font-size: 14px;" class="fa fa-chevron-down"></i>
      </a>
      <div class="dropdown-menu-items">
        <a onclick="openRecharge(this)" class="dropdown-link">
          <i class="fa fa-plus"></i> Add cash
        </a>
        <a href="#" class="dropdown-link">
          <i class="fa fa-history"></i> Transactions
        </a>
      </div>
    </div>
    <a href="#" class="top-nav-btn" onclick="openDesignUploadModal('label', event)">
      <i style="font-size: 16px;" class="fa fa-file-upload"></i> Upload label
    </a>
    <a href="#" class="top-nav-btn" onclick="openDesignUploadModal('image', event)">
      <i style="font-size: 16px;" class="fa fa-file-upload"></i> Upload design
    </a>
    <a href="/profile" class="top-nav-btn"><i style="font-size: 16px;" class="fa-solid fa-user"></i> Profile</a>
  </div>

</div>
<script>
  var isReadyForRendering = false;
  var isWalletOpen = false;
  const modularData = {
    image: {
      obtain: '/obtainimages',
      type: 'image',
      delete: '/deleteimage',
      upload: '/uploadimage',
      arrayName: 'images',
      modalTitle: 'Upload your images',
      modalDesc: 'Click to browse for your images',
      formLabel: 'image'
    },
    label: {
      obtain: '/obtainlabels',
      type: 'label',
      delete: '/deletelabel',
      upload: '/uploadlabel',
      arrayName: 'labels',
      modalTitle: 'Upload your label',
      modalDesc: 'Click to browse for your labels',
      formLabel: 'labelImage'
    },
  }

  const fetchImageAndPopulate = async (data) => {
    try {
      const userImageWrapper = document.querySelector(".user-images");
      userImageWrapper.innerHTML = 'Loading...';

      const imageFetch = await fetch(data.obtain);
      const userImageData = await imageFetch.json();

      console.log(userImageData)

      if (isReadyForRendering && data.arrayName == "images") populateUserDesigns(userImageData);
      if (isReadyForRendering && data.arrayName == "labels") populateUserLabels(userImageData);

      userImageWrapper.innerHTML = '';

      if (!userImageData || userImageData[data.arrayName].length === 0) return userImageWrapper.innerHTML = "No uploads yet!";
      userImageData[data.arrayName].map(imageItem => {
        let currentImage = new Image();
        currentImage.src = imageItem.url;
        //console.log(userImageData[data.arrayName])
        currentImage.addEventListener("load", () => {
          userImageWrapper.innerHTML += `
                <div class="design-image-wrapper">
                  <button class="image-settings"><a href="${imageItem.url}" target="_blank"><i class="fa fa-download"></i></a></button>
                  <button class="image-settings image-settings-2" onclick="deleteImage('${data.type}','${imageItem._id}')"><i class="fa fa-trash"></i></button>
                  <div
                      style="width: 250px; display: flex; justify-content: center; align-items: center; background: url('images/transp-checker.jpg')">
                      <img class="design-image" src="${imageItem.url}" alt="" />
                  </div>
                  <div class="image-details">
                      <h6>${imageItem.name}</h6>
                      <h6>${currentImage.width + 'x' + currentImage.height}</h6>
                      <div class="design-image-meta">
                          <p>${imageItem.format ?? ''}</p>
                          <p>${imageItem.size ? imageItem.size + 'KB' : ''}</p>
                      </div>
                  </div>
                </div> 
              `;
        })
      })
    } catch (err) {
      console.log(err);
      notyf.error("Something went wrong in loading images!");
    }
  }

  const deleteImage = async (type, imageId) => {
    try {
      const imageDeleteRequest = await fetch(modularData[type].delete, {
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          imageId
        }),
        method: 'POST'
      });
      const imageDeleteResponse = await imageDeleteRequest.json();
      if (imageDeleteRequest.ok) {
        notyf.success("Design Image deleted successfully!");
        fetchImageAndPopulate(modularData[type]);
      }
    } catch (error) {
      console.log(error);
      notyf.error("Something went wrong in deleting!");
    }
  }

  const handleImageFormSubmit = async (type, e) => {
    e.preventDefault();
    const userImageForm = document.getElementById('user-image-form');
    let userImageFormPreviousDOM = userImageForm.innerHTML;

    userImageForm.innerHTML = `<span class="loader"></span>`;

    const imageUploadData = new FormData();
    let imageToUpload = e.target.files[0];
    if (!imageToUpload) return;
    imageUploadData.append(modularData[type].formLabel, imageToUpload);

    try {
      const imageUploadRequest = await fetch(modularData[type].upload, {
        body: imageUploadData,
        method: 'POST'
      });
      const imageUploadResponse = await imageUploadRequest.json();
      if (!imageUploadRequest.ok) {
        userImageForm.innerHTML = userImageFormPreviousDOM;
        return notyf.error(imageUploadResponse.message);
      }
      userImageForm.innerHTML = userImageFormPreviousDOM;
      notyf.success("Design Image uploaded successfully!");
      fetchImageAndPopulate(modularData[type]);
    } catch (error) {
      console.log(error);
      notyf.error("Something went wrong in uploading!");
    }
  }

  const openDesignUploadModal = (type, e) => {
    e.preventDefault();
    const data = modularData[type];
    //console.log(data)
    document.querySelector(".navbar-top").insertAdjacentHTML("beforeend", `
      <div class="design-upload-backdrop">
        <div class="design-upload-modal" data-aos="fade-up">
          <div class="modal-controls">
            <button class="modal-close-button" onclick="closeDesignUploadModal(event)">
              <i class="fa fa-close"></i>
            </button>
          </div>
          <form id="user-image-form">
            <label for="file-input" class="file-input">
                <i class="fa-solid fa-circle-plus fa-5x"></i>
                <h5>${data.modalTitle}</h5>
                <p>${data.modalDesc}</p>
            </label>
            <input id="file-input" type="file" onchange="handleImageFormSubmit('${type}',event)" name="${type}" accept="image/png, image/jpg, image/jpeg, image/webp" />
          </form>
          <div class="user-images">
    
          </div>
        </div>
      </div>
    `)

    fetchImageAndPopulate(modularData[type]);
  }

  const closeDesignUploadModal = (e) => {
    document.querySelector(".design-upload-backdrop").remove();
  }

  const closeWallet = (el) => {
    isWalletOpen = false;
    el.removeAttribute("style");
    document.querySelector(".dropdown-menu-items").style.display = "none";
  }

  const toggleWallet = (el) => {
    if (!isWalletOpen) {
      isWalletOpen = true;
      el.style.background = "#f05a30c1"
      document.querySelector(".dropdown-menu-items").style.display = "flex";
    } else {
      closeWallet(el);
    }
  }

  const openRecharge = (el) => {
    const walletWindow = open("/recharge", "RechargeWindow", "scrollbars=1,status=yes,popup=true,width=400,height=600,resizable=no");
    walletWindow.focus();
    walletWindow.addEventListener("message", (e) => {
      if (e.origin != location.origin) return;
      const { goTo } = e.data;
      if (goTo == "dashboard") {
        location.href = "/dashboard";
      }
    })
    console.log(walletWindow)
  }

  const getBal = async () => {
    try {
      const walletBalanceRequest = await fetch("/balance");
      const walletBalanceResponse = await walletBalanceRequest.json();
      if (walletBalanceResponse.message) throw new Error(walletBalanceResponse.message);
      document.querySelector("#wall").innerHTML = `<i style="font-size: 16px;" class="fa fa-wallet"></i> ₹${walletBalanceResponse.balance.toFixed(2)}
        <i style="font-size: 14px;" class="fa fa-chevron-down"></i>`;
    } catch (error) {
      console.log(error);
      notyf.error(error);
    }
  }

  getBal();
</script>